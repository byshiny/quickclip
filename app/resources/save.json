{
  "comment": "I'm trying to keep format consistent, so I'm going to have",
  "circularBuffer": [
    "log.info('currenttext:' + currentText)",
    "clipboard.writeText(currentText)",
    "'use strict'\n/* This file is used to show all the contents of a bufferDiv\n */\n// use for debug purpose only =D\nvar closeEl = document.querySelector('.close')\nvar settingsEl = document.querySelector('.settings')\nvar nodeConsole = require('console')\nvar myConsole = new nodeConsole.Console(process.stdout, process.stderr)\n\nvar CSS_COLOR_NAMES = ['AliceBlue', 'AntiqueWhite', 'Aqua', 'Aquamarine', 'Azure', 'Beige', 'Bisque', 'Black', 'BlanchedAlmond', 'Blue', 'BlueViolet', 'Brown', 'BurlyWood', 'CadetBlue', 'Chartreuse', 'Chocolate', 'Coral', 'CornflowerBlue', 'Cornsilk', 'Crimson', 'Cyan', 'DarkBlue', 'DarkCyan', 'DarkGoldenRod', 'DarkGray', 'DarkGrey', 'DarkGreen', 'DarkKhaki', 'DarkMagenta', 'DarkOliveGreen', 'Darkorange', 'DarkOrchid', 'DarkRed', 'DarkSalmon', 'DarkSeaGreen', 'DarkSlateBlue', 'DarkSlateGray', 'DarkSlateGrey', 'DarkTurquoise', 'DarkViolet', 'DeepPink', 'DeepSkyBlue', 'DimGray', 'DimGrey', 'DodgerBlue', 'FireBrick', 'FloralWhite', 'ForestGreen', 'Fuchsia', 'Gainsboro', 'GhostWhite', 'Gold', 'GoldenRod', 'Gray', 'Grey', 'Green', 'GreenYellow', 'HoneyDew', 'HotPink', 'IndianRed', 'Indigo', 'Ivory', 'Khaki', 'Lavender', 'LavenderBlush', 'LawnGreen', 'LemonChiffon', 'LightBlue', 'LightCoral', 'LightCyan', 'LightGoldenRodYellow', 'LightGray', 'LightGrey', 'LightGreen', 'LightPink', 'LightSalmon', 'LightSeaGreen', 'LightSkyBlue', 'LightSlateGray', 'LightSlateGrey', 'LightSteelBlue', 'LightYellow', 'Lime', 'LimeGreen', 'Linen', 'Magenta', 'Maroon', 'MediumAquaMarine', 'MediumBlue', 'MediumOrchid', 'MediumPurple', 'MediumSeaGreen', 'MediumSlateBlue', 'MediumSpringGreen', 'MediumTurquoise', 'MediumVioletRed', 'MidnightBlue', 'MintCream', 'MistyRose', 'Moccasin', 'NavajoWhite', 'Navy', 'OldLace', 'Olive', 'OliveDrab', 'Orange', 'OrangeRed', 'Orchid', 'PaleGoldenRod', 'PaleGreen', 'PaleTurquoise', 'PaleVioletRed', 'PapayaWhip', 'PeachPuff', 'Peru', 'Pink', 'Plum', 'PowderBlue', 'Purple', 'Red', 'RosyBrown', 'RoyalBlue', 'SaddleBrown', 'Salmon', 'SandyBrown', 'SeaGreen', 'SeaShell', 'Sienna', 'Silver', 'SkyBlue', 'SlateBlue', 'SlateGray', 'SlateGrey', 'Snow', 'SpringGreen', 'SteelBlue', 'Tan', 'Teal', 'Thistle', 'Tomato', 'Turquoise', 'Violet', 'Wheat', 'White', 'WhiteSmoke', 'Yellow', 'YellowGreen']\nconst {\n  ipcRenderer,\n  remote\n} = require('electron')\n// var saveState = document.querySelector('#saveState')\n// var timeTaken = document.querySelector('#timeTaken')\n// myConsole.log('checkyy')\nvar opacity = 1\nipcRenderer.on('inc-opq', (event, message) => {\n  // TODO: this parameters - disappearing and transparency speed needs to be externalized.\n  var opaqueTimer = setInterval(function () {\n    opacity -= 0.05\n    bufferDiv.style.opacity = opacity\n    if (opacity <= 0) {\n      clearInterval(opaqueTimer)\n      var curWindow = remote.getCurrentWindow()\n      curWindow.close()\n    }\n  }, 100)\n})\n\nfunction getRandomInt (min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nfunction replaceBufferFunction(key){\n  return function() { \n  var valueToPass = key\n  ipcRenderer.send('replace-copy-buffer', valueToPass)\n  ; };\n}\nipcRenderer.on('load-buffer', (event, data) => {\n  /*\n  <div>\n    <button type=\"button\" class=\"btn btn-primary dropdown-toggle\" data-toggle=\"dropdown\">\n       Button <span class=\"caret\"></span>\n    </button> Hello!\n  </div>\n*/\n  // TODO: this parameters - disappearing and transparency speed needs to be externalized.\n  document.getElementById('buffer-holder').innerHTML = \"\";\n  var bufferHolder = document.getElementById('buffer-holder')\n  /*\n  <div>\n    <button type=\"button\" class=\"btn btn-primary dropdown-toggle\" data-toggle=\"dropdown\">\n       Button <span class=\"caret\"></span>\n   </button> Hello!\n  </div>\n  <div>\n    <button type=\"button\" class=\"btn btn-primary dropdown-toggle\" data-toggle=\"dropdown\">\n       Button <span class=\"caret\"></span>\n   </button> Herro!\n </div> */\n var savedBuffers = data.savedBuffers\n\n  for (var key in savedBuffers.textBufferContent) {\n    if (savedBuffers.textBufferChecker[key] === 1) {\n      var button = document.createElement('button')\n      var textHolder = document.createElement('div')\n      var randColorInt = getRandomInt(0, CSS_COLOR_NAMES.length)\n      var rand1Color = CSS_COLOR_NAMES[randColorInt]\n      button.classList.add('btn')\n      button.innerHTML = key\n      button.setAttribute(\"id\", key)\n      \n      var textContent = savedBuffers.textBufferContent[key]\n      button.addEventListener(\"click\", replaceBufferFunction(textContent));\n      textHolder.innerHTML = textContent\n      textHolder.classList.add(\"pre-scrollable\")\n      var linebreak = document.createElement('br')\n      bufferHolder.appendChild(linebreak)\n      button.style.backgroundColor = rand1Color\n      bufferHolder.appendChild(button)\n      bufferHolder.appendChild(textHolder)\n    }\n    //  bufferHolderDiv.appendChild(bufferHolderDiv)\n  }\n\n  // myConsole.log('checkyy')\n})\n",
    "'use strict'\n/* This file is used to show all the contents of a bufferDiv\n */\n// use for debug purpose only =D\nvar closeEl = document.querySelector('.close')\nvar settingsEl = document.querySelector('.settings')\nvar nodeConsole = require('console')\nvar myConsole = new nodeConsole.Console(process.stdout, process.stderr)\n\nvar CSS_COLOR_NAMES = ['AliceBlue', 'AntiqueWhite', 'Aqua', 'Aquamarine', 'Azure', 'Beige', 'Bisque', 'Black', 'BlanchedAlmond', 'Blue', 'BlueViolet', 'Brown', 'BurlyWood', 'CadetBlue', 'Chartreuse', 'Chocolate', 'Coral', 'CornflowerBlue', 'Cornsilk', 'Crimson', 'Cyan', 'DarkBlue', 'DarkCyan', 'DarkGoldenRod', 'DarkGray', 'DarkGrey', 'DarkGreen', 'DarkKhaki', 'DarkMagenta', 'DarkOliveGreen', 'Darkorange', 'DarkOrchid', 'DarkRed', 'DarkSalmon', 'DarkSeaGreen', 'DarkSlateBlue', 'DarkSlateGray', 'DarkSlateGrey', 'DarkTurquoise', 'DarkViolet', 'DeepPink', 'DeepSkyBlue', 'DimGray', 'DimGrey', 'DodgerBlue', 'FireBrick', 'FloralWhite', 'ForestGreen', 'Fuchsia', 'Gainsboro', 'GhostWhite', 'Gold', 'GoldenRod', 'Gray', 'Grey', 'Green', 'GreenYellow', 'HoneyDew', 'HotPink', 'IndianRed', 'Indigo', 'Ivory', 'Khaki', 'Lavender', 'LavenderBlush', 'LawnGreen', 'LemonChiffon', 'LightBlue', 'LightCoral', 'LightCyan', 'LightGoldenRodYellow', 'LightGray', 'LightGrey', 'LightGreen', 'LightPink', 'LightSalmon', 'LightSeaGreen', 'LightSkyBlue', 'LightSlateGray', 'LightSlateGrey', 'LightSteelBlue', 'LightYellow', 'Lime', 'LimeGreen', 'Linen', 'Magenta', 'Maroon', 'MediumAquaMarine', 'MediumBlue', 'MediumOrchid', 'MediumPurple', 'MediumSeaGreen', 'MediumSlateBlue', 'MediumSpringGreen', 'MediumTurquoise', 'MediumVioletRed', 'MidnightBlue', 'MintCream', 'MistyRose', 'Moccasin', 'NavajoWhite', 'Navy', 'OldLace', 'Olive', 'OliveDrab', 'Orange', 'OrangeRed', 'Orchid', 'PaleGoldenRod', 'PaleGreen', 'PaleTurquoise', 'PaleVioletRed', 'PapayaWhip', 'PeachPuff', 'Peru', 'Pink', 'Plum', 'PowderBlue', 'Purple', 'Red', 'RosyBrown', 'RoyalBlue', 'SaddleBrown', 'Salmon', 'SandyBrown', 'SeaGreen', 'SeaShell', 'Sienna', 'Silver', 'SkyBlue', 'SlateBlue', 'SlateGray', 'SlateGrey', 'Snow', 'SpringGreen', 'SteelBlue', 'Tan', 'Teal', 'Thistle', 'Tomato', 'Turquoise', 'Violet', 'Wheat', 'White', 'WhiteSmoke', 'Yellow', 'YellowGreen']\nconst {\n  ipcRenderer,\n  remote\n} = require('electron')\n// var saveState = document.querySelector('#saveState')\n// var timeTaken = document.querySelector('#timeTaken')\n// myConsole.log('checkyy')\nvar opacity = 1\nipcRenderer.on('inc-opq', (event, message) => {\n  // TODO: this parameters - disappearing and transparency speed needs to be externalized.\n  var opaqueTimer = setInterval(function () {\n    opacity -= 0.05\n    bufferDiv.style.opacity = opacity\n    if (opacity <= 0) {\n      clearInterval(opaqueTimer)\n      var curWindow = remote.getCurrentWindow()\n      curWindow.close()\n    }\n  }, 100)\n})\n\nfunction getRandomInt (min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nfunction replaceBufferFunction(key){\n  return function() { \n  var valueToPass = key\n  ipcRenderer.send('replace-copy-buffer', valueToPass)\n  ; };\n}\nipcRenderer.on('load-buffer', (event, data) => {\n  /*\n  <div>\n    <button type=\"button\" class=\"btn btn-primary dropdown-toggle\" data-toggle=\"dropdown\">\n       Button <span class=\"caret\"></span>\n    </button> Hello!\n  </div>\n*/\n  // TODO: this parameters - disappearing and transparency speed needs to be externalized.\n  document.getElementById('buffer-holder').innerHTML = \"\";\n  var bufferHolder = document.getElementById('buffer-holder')\n  /*\n  <div>\n    <button type=\"button\" class=\"btn btn-primary dropdown-toggle\" data-toggle=\"dropdown\">\n       Button <span class=\"caret\"></span>\n   </button> Hello!\n  </div>\n  <div>\n    <button type=\"button\" class=\"btn btn-primary dropdown-toggle\" data-toggle=\"dropdown\">\n       Button <span class=\"caret\"></span>\n   </button> Herro!\n </div> */\n var savedBuffers = data.savedBuffers\n\n  for (var key in savedBuffers.textBufferContent) {\n    if (savedBuffers.textBufferChecker[key] === 1) {\n      var button = document.createElement('button')\n      var textHolder = document.createElement('div')\n      var randColorInt = getRandomInt(0, CSS_COLOR_NAMES.length)\n      var rand1Color = CSS_COLOR_NAMES[randColorInt]\n      button.classList.add('btn')\n      button.innerHTML = key\n      button.setAttribute(\"id\", key)\n      \n      var textContent = savedBuffers.textBufferContent[key]\n      button.addEventListener(\"click\", replaceBufferFunction(textContent));\n      textHolder.innerHTML = textContent\n      textHolder.classList.add(\"pre-scrollable\")\n      var linebreak = document.createElement('br')\n      bufferHolder.appendChild(linebreak)\n      button.style.backgroundColor = rand1Color\n      bufferHolder.appendChild(button)\n      bufferHolder.appendChild(textHolder)\n    }\n    //  bufferHolderDiv.appendChild(bufferHolderDiv)\n  }\n\n  // myConsole.log('checkyy')\n})\n",
    "/quickclip ",
    "textFromBuffer",
    "textFromBuffer",
    "textContent",
    "replaceBufferFunction",
    "valueToPass"
  ],
  "keyBuffer": {
    "1": "/quickclip ",
    "2": "clipboard.writeText(currentText)",
    "3": "=(",
    "4": "=(",
    "5": "=(",
    ";": "log.info('currenttext:' + currentText)",
    "'": "=(",
    "{": "https://github.com/junegunn/fzf.vim",
    "copyKey": "=(",
    "showKey": "=(",
    "circBufferKey": "=(",
    "Semi": "=(",
    "Quotes": "=(",
    "Bracket": "=("
  }
}